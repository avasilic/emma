name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Set up Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc-gen-go
        run: go install google.golang.org/protobuf/cmd/protoc-gen-go@latest

      - name: Generate protobuf files
        run: buf generate

      - name: Verify protobuf files generated
        run: |
          echo "Verifying protobuf files were generated..."
          ls -la gen/go/proto/v1/

      - name: Upload generated protobuf files
        uses: actions/upload-artifact@v4
        with:
          name: generated-protobuf
          path: gen/
          retention-days: 1

  go-checks:
    name: Go Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Download generated protobuf files
        uses: actions/download-artifact@v4
        with:
          name: generated-protobuf
          path: gen/

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run tests
        run: go test -race -coverprofile=coverage.out ./...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          skip-cache: false
          skip-save-cache: false

      - name: Build ingestor
        run: go build -v ./cmd/ingestor

      - name: Upload coverage reports to Codecov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: go
          name: go-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  rust-checks:
    name: Rust Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install protobuf compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Download generated protobuf files
        uses: actions/download-artifact@v4
        with:
          name: generated-protobuf
          path: gen/

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: cmd/processor

      - name: Check formatting
        run: cargo fmt --all -- --check
        working-directory: ./cmd/processor

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: ./cmd/processor

      - name: Run tests
        run: cargo test --verbose
        working-directory: ./cmd/processor

      - name: Build processor
        run: cargo build --verbose --release
        working-directory: ./cmd/processor

      - name: Check for security vulnerabilities
        run: |
          cargo install cargo-audit
          cargo audit
        working-directory: ./cmd/processor

  protobuf-checks:
    name: Protobuf Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download generated protobuf files
        uses: actions/download-artifact@v4
        with:
          name: generated-protobuf
          path: gen/

      - name: Lint protobuf files
        run: buf lint

      - name: Check protobuf breaking changes
        uses: bufbuild/buf-breaking-action@v1
        if: github.event_name == 'pull_request'
        with:
          against: "https://github.com/${{ github.repository }}.git#branch=${{ github.base_ref }}"

      - name: Check if generated files are up to date
        run: |
          if [ -n "$(git diff --name-only)" ]; then
            echo "Generated protobuf files are not up to date. Please run 'buf generate' and commit the changes."
            git diff
            exit 1
          fi

  docker-checks:
    name: Docker Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate docker-compose
        run: docker compose config

      - name: Check if docker-compose services start
        run: |
          docker compose up -d kafka influxdb
          sleep 30
          docker compose ps
          docker compose logs
          docker compose down

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
